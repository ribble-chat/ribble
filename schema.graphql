"""
The `@defer` directive may be provided for fragment spreads and inline fragments
to inform the executor to delay the execution of the current fragment to
indicate deprioritization of the current fragment. A query with `@defer`
directive will cause the request to potentially return multiple responses, where
non-deferred data is delivered in the initial response and data deferred is
delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to
  the result of this defer directive. This label is intended to give client
  applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """Deferred when true."""
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the
backend can leverage technology such as asynchronous iterators to provide a
partial list in the initial response, and additional list items in subsequent
responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to
  the result of this stream directive. This label is intended to give client
  applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """The initial elements that shall be send down to the consumer."""
  initialCount: Int!

  """Streamed when true."""
  if: Boolean!
) on FIELD

"""
The `@specifiedBy` directive is used within the type system definition language
to provide a URL for specifying the behavior of custom scalar definitions.
"""
directive @specifiedBy(
  """
  The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types.
  """
  url: String!
) on SCALAR

type ChatMessage {
  groupId: Uuid!
  timestamp: DateTime!
  messageId: Uuid!
  authorId: Uuid!
  authorName: String!
  content: String!
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

type Group implements Node {
  id: ID!
  name: String!
  users: [User!]!
}

type LoginIncorrectPasswordError {
  error: String!
}

union LoginResult = LoginSuccess | LoginUnknownUserError | LoginIncorrectPasswordError

type LoginSuccess {
  user: User!
}

type LoginUnknownUserError {
  error: String!
}

type Mutation {
  sendMessage(input: SendMessageInput!): SendMessagePayload!
  testMutation(input: TestMutationInput!): TestMutationPayload!
  login(usernameOrEmail: String!, password: String!): LoginResult!
}

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

type Query {
  node(id: ID!): Node
  users: [User!]!
  groups: [Group!]!
}

input SendMessageInput {
  authorId: Uuid!
  groupId: Uuid!
  authorUsername: String!
  content: String!
}

type SendMessagePayload {
  message: ChatMessage!
}

type Subscription {
  onTestEvent: Int!
  onMessageSent(groupId: Uuid!): ChatMessage!
}

input TestMutationInput {
  x: Int!
}

type TestMutationPayload {
  y: Int!
}

type User implements Node {
  id: ID!
  username: String!
  email: String!
  phoneNumber: String
  groups: [Group!]!
  concurrencyStamp: String
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
}

scalar Uuid


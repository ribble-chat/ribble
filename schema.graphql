"""
The `@defer` directive may be provided for fragment spreads and inline fragments
to inform the executor to delay the execution of the current fragment to
indicate deprioritization of the current fragment. A query with `@defer`
directive will cause the request to potentially return multiple responses, where
non-deferred data is delivered in the initial response and data deferred is
delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to
  the result of this defer directive. This label is intended to give client
  applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """Deferred when true."""
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the
backend can leverage technology such as asynchronous iterators to provide a
partial list in the initial response, and additional list items in subsequent
responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to
  the result of this stream directive. This label is intended to give client
  applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """The initial elements that shall be send down to the consumer."""
  initialCount: Int!

  """Streamed when true."""
  if: Boolean!
) on FIELD

"""
The `@specifiedBy` directive is used within the type system definition language
to provide a URL for specifying the behavior of custom scalar definitions.
"""
directive @specifiedBy(
  """
  The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types.
  """
  url: String!
) on SCALAR

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

type ChatMessage {
  groupId: ID!
  timestamp: DateTime!
  messageId: ID!
  authorId: ID!
  authorUsername: String!
  content: String!
}

input ComparableGuidOperationFilterInput {
  eq: Uuid
  neq: Uuid
  in: [Uuid!]
  nin: [Uuid!]
  gt: Uuid
  ngt: Uuid
  gte: Uuid
  ngte: Uuid
  lt: Uuid
  nlt: Uuid
  lte: Uuid
  nlte: Uuid
}

input ComparableNullableOfDateTimeOffsetOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input CreateGroupInput {
  groupName: String!
  userIds: [ID!]!
}

type CreateGroupPayload {
  group: Group!
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

type Group implements Node {
  id: ID!
  name: String!
  users: [User!]!
}

input GroupFilterInput {
  and: [GroupFilterInput!]
  or: [GroupFilterInput!]
  id: ComparableGuidOperationFilterInput
  name: StringOperationFilterInput
  users: ListFilterInputTypeOfUserFilterInput
}

input JoinGroupInput {
  groupId: Uuid!
  userId: Uuid!
}

type JoinGroupPayload {
  group: Group!
}

input ListFilterInputTypeOfGroupFilterInput {
  all: GroupFilterInput
  none: GroupFilterInput
  some: GroupFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserFilterInput {
  all: UserFilterInput
  none: UserFilterInput
  some: UserFilterInput
  any: Boolean
}

type LoginIncorrectPasswordError {
  error: String!
}

union LoginResult = LoginSuccess | LoginUnknownUserError | LoginIncorrectPasswordError

type LoginSuccess {
  user: User!
}

type LoginUnknownUserError {
  error: String!
}

type Mutation {
  sendMessage(input: SendMessageInput!): SendMessagePayload!
  joinGroup(input: JoinGroupInput!): JoinGroupPayload!
  createGroup(input: CreateGroupInput!): CreateGroupPayload!
  login(usernameOrEmail: String!, password: String!): LoginResult!
  register(input: RegisterMutationInput!): RegisterMutationPayload!
  testMutation(input: TestMutationInput!): TestMutationPayload!
}

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

type Query {
  node(id: ID!): Node
  users(where: UserFilterInput): [User!]!
  groups(where: GroupFilterInput): [Group!]!
}

input RegisterMutationInput {
  username: String!
  email: String!
  password: String!
}

type RegisterMutationPayload {
  user: User!
}

input SendMessageInput {
  authorId: ID!
  groupId: ID!
  authorUsername: String!
  content: String!
}

type SendMessagePayload {
  message: ChatMessage!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

type Subscription {
  onTestEvent: Int!
  onMessageSent(groupId: Uuid!): ChatMessage!
}

input TestMutationInput {
  x: Int!
}

type TestMutationPayload {
  y: Int!
}

type User implements Node {
  id: ID!
  username: String!
  email: String!
  phoneNumber: String
  groups: [Group!]!
  concurrencyStamp: String
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  id: ComparableGuidOperationFilterInput
  userName: StringOperationFilterInput
  email: StringOperationFilterInput
  phoneNumber: StringOperationFilterInput
  groups: ListFilterInputTypeOfGroupFilterInput
  concurrencyStamp: StringOperationFilterInput
  twoFactorEnabled: BooleanOperationFilterInput
  lockoutEnd: ComparableNullableOfDateTimeOffsetOperationFilterInput
  lockoutEnabled: BooleanOperationFilterInput
}

scalar Uuid

